name: Gobot
on:
  workflow_call:
    inputs:
      godot-version:
        description: Godot Version
        required: true
        type: string
      delete-old-pages:
        description: Delete Old Pages
        required: true
        type: string
concurrency:
  group: gobot
  cancel-in-progress: false
env:
  GODOT_VERSION: ${{ github.event.inputs.godot-version }}
  DELETE_OLD_PAGES: ${{ github.event.inputs.delete-old-pages }}
jobs:
  Setup: # Cache Godot and Export Templates, and analyze input to generate a dynamic platform matrix.
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.parse.outputs.matrix }}
      web: ${{ steps.parse.outputs.web }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Parse
        id: parse
        run: |
          # error if presets file missing/empty or input malformed
          if [ ! -f export_presets.cfg ] || [ ! -s export_presets.cfg ]; then
            echo "> [!CAUTION]" >> $GITHUB_STEP_SUMMARY
            echo "> `export_presets.cfg` is missing or empty, nothing to do." >> $GITHUB_STEP_SUMMARY
            exit 1
          elif ! [[ "${GODOT_VERSION}" =~ ^[0-9]+\.[0-9]+(\.[0-9]+)?$ ]]; then
            echo "> [!CAUTION]" >> $GITHUB_STEP_SUMMARY
            echo "> Invalid GODOT_VERSION format: ${GODOT_VERSION}" >> $GITHUB_STEP_SUMMARY
            exit 2
          elif [[ "${DELETE_OLD_PAGES}" != 'true' && "${DELETE_OLD_PAGES}" != 'false' ]]; then
            echo "> [!CAUTION]" >> $GITHUB_STEP_SUMMARY
            echo "> Invalid boolean input: ${DELETE_OLD_PAGES}. Must be 'true' or 'false'." >> $GITHUB_STEP_SUMMARY
            exit 3
          fi

          # generate dynamic platform matrix based on presets file
          awk_output=$(awk -F= '
          BEGIN { printf "["; first=1 }
          /^\s*platform/ { platform=$2; gsub(/^"|"$/, "", platform) }
          /^\s*export_path/ {
            path=$2; gsub(/^"|"$/, "", path)
            if (path == "") {
              path = (platform == "Linux") || (platform == "Linux/X11") ? "${{ github.event.repository.name }}.x86_64" :
                     (platform == "macOS") ? "${{ github.event.repository.name }}.zip" :
                     (platform == "Web") ? "index.html" :
                     (platform == "Windows Desktop") ? "${{ github.event.repository.name }}.exe" : ""
            }
            platform_dir = (platform == "Windows Desktop") ? "Windows" :
                           (platform == "Linux/X11") ? "Linux" : platform
            n = split(path, arr, "/")
            split(arr[n], file_parts, ".")
            printf "%s{\"target\":\"%s\",\"dir\":\"%s\",\"file\":\"%s\",\"ext\":\"%s\"}",
                   (first ? "" : ","), platform, platform_dir, file_parts[1], file_parts[2]
            first=0
          }
          END { print "]" }' export_presets.cfg)

          linux_found=$(echo "$awk_output" | jq 'map(select(.target == "Linux")) | length')
          linux_x11_found=$(echo "$awk_output" | jq 'map(select(.target == "Linux/X11")) | length')
          web_found=$(echo "$awk_output" | jq 'map(select(.target == "Web")) | length')
          if [[ "$web_found" -gt 0 ]]; then
            echo "web=true" >> $GITHUB_OUTPUT
          fi

          # warn if version < 4.3 and Linux/X11 not found but Linux found
          if [[ "$(printf '%s\n' "${GODOT_VERSION}" "4.3" | sort -V | head -n1)" != "4.3" && "$linux_found" -gt 0 && "$linux_x11_found" -eq 0 ]]; then
            echo "> [!WARNING]" >> $GITHUB_STEP_SUMMARY
            echo "> The \`Linux\` platform is found in your export presets, but the \`Linux/X11\` platform is missing. For Godot versions earlier than 4.3, the \`Linux/X11\` platform is expected." >> $GITHUB_STEP_SUMMARY
            awk_output=$(echo "$awk_output" | jq 'map(select(.target != "Linux"))')
          fi

          # warn if version > 4.2 and Linux not found but Linux/X11 found
          if [[ "$(printf '%s\n' "${GODOT_VERSION}" "4.2" | sort -V | head -n1)" == "4.2" && "$linux_found" -eq 0 && "$linux_x11_found" -gt 0 ]]; then
            echo "> [!WARNING]" >> $GITHUB_STEP_SUMMARY
            echo "> The \`Linux/X11\` platform is found in your export presets, but the \`Linux\` platform is missing. For Godot versions later than 4.2, the \`Linux\` platform is expected." >> $GITHUB_STEP_SUMMARY
            awk_output=$(echo "$awk_output" | jq 'map(select(.target != "Linux/X11"))')
          fi

          # if both, remove 1
          if [[ "$linux_found" -gt 0 && "$linux_x11_found" -gt 0 ]]; then
            if [[ "$(printf '%s\n' "${GODOT_VERSION}" "4.3" | sort -V | head -n1)" == "4.3" ]]; then
              echo "> [!IMPORTANT]" >> $GITHUB_STEP_SUMMARY
              echo "> Both \`Linux\` and \`Linux/X11\` are found in your export presets. For Godot 4.3 or later, \`Linux/X11\` is deprecated. Removing \`Linux/X11\`." >> $GITHUB_STEP_SUMMARY
              awk_output=$(echo "$awk_output" | jq 'map(select(.target != "Linux/X11"))')
            else
              echo "> [!IMPORTANT]" >> $GITHUB_STEP_SUMMARY
              echo "> Both \`Linux\` and \`Linux/X11\` are found in your export presets. For Godot versions earlier than 4.3, \`Linux\` is deprecated. Removing \`Linux\`." >> $GITHUB_STEP_SUMMARY
              awk_output=$(echo "$awk_output" | jq 'map(select(.target != "Linux"))')
            fi
          fi

          echo "matrix=$awk_output" >> $GITHUB_OUTPUT
      - name: Cache
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            ./godot
            ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable
          key: ${{ runner.os }}_Godot_${{ env.GODOT_VERSION }}
      - name: Cache Godot
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          curl -L -o godot.zip https://downloads.tuxfamily.org/godotengine/${GODOT_VERSION}/Godot_v${GODOT_VERSION}-stable_linux.x86_64.zip
          unzip -q godot.zip && mv Godot_v${GODOT_VERSION}-stable_linux.x86_64 godot && chmod +x godot
          curl -L -o templates.tpz https://downloads.tuxfamily.org/godotengine/${GODOT_VERSION}/Godot_v${GODOT_VERSION}-stable_export_templates.tpz
          mkdir -p ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable && unzip -q templates.tpz && mv templates/* ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable
  Build: # Export the project for each target platform concurrently.
    needs: [Setup]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.Setup.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Restore
        id: cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ./godot
            ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable
          key: ${{ runner.os }}_Godot_${{ env.GODOT_VERSION }}
      - name: Import
        run: ./godot --headless --verbose --editor --quit
      - name: Export
        run: |
          mkdir -p "build/${{ matrix.dir }}"
          ./godot --headless --verbose --export-release "${{ matrix.target }}" "build/${{ matrix.dir }}/${{ matrix.file }}.${{ matrix.ext }}"
      - name: Upload Web
        if: matrix.target == 'Web'
        uses: actions/upload-pages-artifact@v3
        with:
          name: ${{ github.event.repository.name }}_${{ matrix.dir }}_Godot_${{ env.GODOT_VERSION }}
          path: build/${{ matrix.dir }}
      - name: Upload Not Web
        if: matrix.target != 'Web'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}_${{ matrix.dir }}_Godot_${{ env.GODOT_VERSION }}
          path: build/${{ matrix.dir }}
  Deploy: # Deploy Web build to Pages after optionally deleting old Pages deployments.
    needs: [Setup, Build]
    if: needs.Setup.outputs.web == 'true'
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
      deployments: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Delete
        if: github.event.inputs.delete-old-pages == 'true'
        uses: strumwolf/delete-deployment-environment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: github-pages
          onlyRemoveDeployments: true
      - name: Configure
        uses: actions/configure-pages@v5
      - name: Deploy
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: ${{ github.event.repository.name }}_Web_Godot_${{ env.GODOT_VERSION }}
