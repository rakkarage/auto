name: Godot Build and Deploy
on:
  workflow_call:
    inputs:
      godot_version:
        description: Godot Version
        required: true
        type: string
concurrency:
  group: godot-build-and-deploy
  cancel-in-progress: false
env:
  GODOT_VERSION: ${{ github.event.inputs.godot_version }}
jobs:
  Setup:
    runs-on: ubuntu-latest
    steps:
      - name: Cache
        id: godot-cache
        uses: actions/cache@v4
        with:
          path: |
            ./godot
            ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable
          key: '${{ runner.os }}_Godot_${{ env.GODOT_VERSION }}'
      - name: Cache Godot
        if: steps.godot-cache.outputs.cache-hit != 'true'
        run: |
          curl -L -o godot.zip https://downloads.tuxfamily.org/godotengine/${GODOT_VERSION}/Godot_v${GODOT_VERSION}-stable_linux.x86_64.zip
          unzip -q godot.zip
          mv Godot_v${GODOT_VERSION}-stable_linux.x86_64 godot
          chmod +x godot
      - name: Cache Godot Templates
        if: steps.godot-cache.outputs.cache-hit != 'true'
        run: |
          curl -L -o templates.zip https://downloads.tuxfamily.org/godotengine/${GODOT_VERSION}/Godot_v${GODOT_VERSION}-stable_export_templates.tpz
          unzip -q templates.zip
          mkdir -v -p ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable
          mv templates/* ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable
  Parse:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
      web: ${{ steps.matrix.outputs.web }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Parse
        id: matrix
        run: |
          awk_output=$(awk -F= '
          BEGIN { printf "["; first=1 }
          /^\s*platform/ { platform=$2; gsub(/^"|"$/, "", platform) }
          /^\s*export_path/ {
            path=$2; gsub(/^"|"$/, "", path)
            if (path=="") {
              path = (platform == "Linux") ? "${{ github.event.repository.name }}.x86_64" :
                     (platform == "macOS") ? "${{ github.event.repository.name }}.zip" :
                     (platform == "Web") ? "index.html" :
                     (platform == "Windows Desktop") ? "${{ github.event.repository.name }}.exe" : ""
            }
            n = split(path, arr, "/")
            split(arr[n], file_parts, ".")
            printf "%s{\"target\":\"%s\",\"file\":\"%s\",\"ext\":\"%s\"}",
                   (first ? "" : ","), platform, file_parts[1], file_parts[2]
            first=0
          }
          END { print "]" }' export_presets.cfg)
          echo "matrix=$(echo "$awk_output" | jq -c .)" >> $GITHUB_OUTPUT
          echo $awk_output
      - name: Check
        id: web
        run: |
          matrix_output='${{ steps.matrix.outputs.matrix }}'
          echo "Matrix output: $matrix_output"
          if echo "$matrix_output" | grep -q '"target":"Web"'; then
            echo "web=true" >> $GITHUB_OUTPUT
            echo "Web target found."
          else
            echo "web=false" >> $GITHUB_OUTPUT
            echo "Web target not found."
          fi
      - name: Debug
        run: |
          echo "Web output: ${{ steps.web.outputs.web }}"
  Build:
    needs: [Setup, Parse]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        include: ${{ fromJson(needs.Parse.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Restore
        id: godot-cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ./godot
            ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable
          key: '${{ runner.os }}_Godot_${{ env.GODOT_VERSION }}'
      - name: Import
        run: ./godot --headless --verbose --editor --quit
      - name: Export
        run: |
          mkdir -v -p 'build/${{ matrix.target }}'
          ./godot --headless --verbose --export-release '${{ matrix.target }}' 'build/${{ matrix.target }}/${{ matrix.file }}.${{ matrix.ext }}'
      - name: Upload Web
        if: matrix.target == 'Web'
        uses: actions/upload-pages-artifact@v3
        with:
          name: '${{ github.event.repository.name }}_${{ matrix.target }}_Godot_${{ env.GODOT_VERSION }}'
          path: 'build/${{ matrix.target }}'
      - name: Upload Not Web
        if: matrix.target != 'Web'
        uses: actions/upload-artifact@v4
        with:
          name: '${{ github.event.repository.name }}_${{ matrix.target }}_Godot_${{ env.GODOT_VERSION }}'
          path: 'build/${{ matrix.target }}'
  Clean:
    needs: [Parse, Build]
    if: needs.Parse.outputs.web == 'true'
    runs-on: ubuntu-latest
    permissions:
      deployments: write
    steps:
      - name: Delete
        uses: strumwolf/delete-deployment-environment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: github-pages
          onlyRemoveDeployments: true
  Deploy:
    needs: [Parse, Build, Clean]
    if: needs.Parse.outputs.web == 'true'
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Configure
        uses: actions/configure-pages@v5
      - name: Deploy
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: '${{ github.event.repository.name }}_Web_Godot_${{ env.GODOT_VERSION }}'
