name: Godot Build and Deploy
on:
  workflow_call:
    inputs:
      godot_version:
        description: Godot Version
        required: true
        type: string
concurrency:
  group: godot-build-and-deploy
  cancel-in-progress: false
env:
  GODOT_VERSION: ${{ github.event.inputs.godot_version }}
jobs:
  Setup:
    runs-on: ubuntu-latest
    steps:
      - name: Cache
        id: godot-cache
        uses: actions/cache@v4
        with:
          path: |
            ./godot
            ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable
          key: '${{ runner.os }}_Godot_${{ env.GODOT_VERSION }}'
      - name: Cache Godot
        if: steps.godot-cache.outputs.cache-hit != 'true'
        run: |
          curl -L -o godot.zip https://downloads.tuxfamily.org/godotengine/${GODOT_VERSION}/Godot_v${GODOT_VERSION}-stable_linux.x86_64.zip
          unzip -q godot.zip
          mv Godot_v${GODOT_VERSION}-stable_linux.x86_64 godot
          chmod +x godot
      - name: Cache Godot Templates
        if: steps.godot-cache.outputs.cache-hit != 'true'
        run: |
          curl -L -o templates.zip https://downloads.tuxfamily.org/godotengine/${GODOT_VERSION}/Godot_v${GODOT_VERSION}-stable_export_templates.tpz
          unzip -q templates.zip
          mkdir -v -p ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable
          mv templates/* ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable
  Parse:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Parse
        run: |
          awk -F= '
          BEGIN {
            print "["
          }
          /^\[preset/ {preset=$0}
          /^\s*platform/ {platform=$2}
          /^\s*export_path/ {
              path = $2
              if (path == "\"\"") {
                  # Set default value if path is empty based on platform
                  if (platform == "\"Linux\"") {
                      path = "default_path/filename.x86_64"
                  } else if (platform == "\"macOS\"") {
                      path = "default_path/filename.zip"
                  } else if (platform == "\"Web\"") {
                      path = "default_path/index.html"
                  } else if (platform == "\"Windows Desktop\"") {
                      path = "default_path/filename.exe"
                  }
              }

              # Extract filename and extension
              split(path, arr, "/")
              full_filename = arr[length(arr)]
              split(full_filename, file_parts, ".")
              filename = file_parts[1]
              extension = (length(file_parts) > 1) ? "." file_parts[2] : ".ext"

              # Print output as a JSON-like object
              print "{ \"platform\": " platform ", \"file\": \"" filename "\", \"ext\": \"" extension "\" },"
          }
          END {
            print "]"
          }' export_presets.cfg | tee matrix.json
      - name: Matrix
        id: matrix
        run: echo "matrix=$(cat matrix.json)" >> $GITHUB_OUTPUT
  Build:
    needs: [Setup, Parse]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        include: ${{ fromJson(needs.Parse.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Restore
        id: godot-cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ./godot
            ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable
          key: '${{ runner.os }}_Godot_${{ env.GODOT_VERSION }}'
      - name: Import
        run: ./godot --headless --verbose --editor --quit
      - name: Export
        run: |
          mkdir -v -p build/${{ matrix.target }}
          ./godot --headless --verbose --export-release '${{ matrix.target }}' build/${{ matrix.target }}/${{ matrix.file }}.${{ matrix.ext }}
      - name: Upload Web
        if: matrix.target == 'Web'
        uses: actions/upload-pages-artifact@v3
        with:
          name: '${{ github.event.repository.name }}_${{ matrix.target }}_Godot_${{ env.GODOT_VERSION }}'
          path: 'build/${{ matrix.target }}'
      - name: Upload Not Web
        if: matrix.target != 'Web'
        uses: actions/upload-artifact@v4
        with:
          name: '${{ github.event.repository.name }}_${{ matrix.target }}_Godot_${{ env.GODOT_VERSION }}'
          path: 'build/${{ matrix.target }}'
  Clean:
    needs: Build
    runs-on: ubuntu-latest
    permissions:
      deployments: write
    steps:
      - name: Delete
        uses: strumwolf/delete-deployment-environment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: github-pages
          onlyRemoveDeployments: true
  Deploy:
    needs: [Build, Clean]
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Configure
        uses: actions/configure-pages@v5
      - name: Deploy
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: '${{ github.event.repository.name }}_Web_Godot_${{ env.GODOT_VERSION }}'
